%% This is file `elsarticle-template-2-harv.tex',
%%
%% Copyright 2009 Elsevier Ltd
%%
%% This file is part of the 'Elsarticle Bundle'.
%% ---------------------------------------------
%%
%% It may be distributed under the conditions of the LaTeX Project Public
%% License, either version 1.2 of this license or (at your option) any
%% later version.  The latest version of this license is in
%%    http://www.latex-project.org/lppl.txt
%% and version 1.2 or later is part of all distributions of LaTeX
%% version 1999/12/01 or later.
%%
%% The list of all files belonging to the 'Elsarticle Bundle' is
%% given in the file `manifest.txt'.
%%
%% Template article for Elsevier's document class `elsarticle'
%% with harvard style bibliographic references
%%
%% $Id: elsarticle-template-2-harv.tex 155 2009-10-08 05:35:05Z rishi $
%% $URL: http://lenova.river-valley.com/svn/elsbst/trunk/elsarticle-template-2-harv.tex $
%%
\documentclass[preprint,times,authoryear,12pt]{elsarticle}


%% The amssymb package provides various useful mathematical symbols
\usepackage{amssymb,amsmath}


%%%%%%%%%% Remove the following before submission %%%%%%%%%%%%%%%%%%

\usepackage{mathspec,xltxtra,xunicode}
%\usepackage{unicode-math}
\defaultfontfeatures{Scale=MatchLowercase}
%\setmainfont[Mapping=tex-text,Numbers=OldStyle]{Palatino LT Std}
\setmainfont[Ligatures=TeX,Numbers=OldStyle]{Minion Pro}
\setsansfont[Mapping=tex-text]{ITC Legacy Sans Std Medium}
\setmonofont{Bitstream Vera Sans Mono}
\setmathfont(Digits,Latin,Greek)[Script=Math,Uppercase=Italic,Lowercase=Italic]{Minion Math}
\setmathfont[range={\mathbfup->\mathup}]{MinionMath-Semibold.otf}
\setmathfont[range={\mathbfit->\mathit}]{MinionMath-Semibold.otf}
\setmathfont[range={\mathit->\mathit}]{MinionMath-Regular.otf}

%%%%%%%%%% Remove the above before submission %%%%%%%%%%%%%%%%%%

%% The amsthm package provides extended theorem environments
%% \usepackage{amsthm}

%% The lineno packages adds line numbers. Start line numbering with
%% \begin{linenumbers}, end it with \end{linenumbers}. Or switch it on
%% for the whole article with \linenumbers after \end{frontmatter}.
\usepackage{lineno}
\usepackage{graphicx}
\usepackage{xspace}
\usepackage{bm}
\usepackage{longtable}
\usepackage{hyphenat}
\usepackage{lipsum}
\usepackage{url}
\usepackage{madsen-macros}

\journal{Journal of Anthropological Archaeology}



\begin{document}

\begin{frontmatter}


\title{RESEARCH NOTE:\\ Combinatorial Structure of the Deterministic Seriation Method with Multiple Spatial Solutions}

\author{Mark E. Madsen}
\address{Department of Anthropology, Box 353100, University of Washington, Seattle WA, 98195 USA}
\ead{mark@madsenlab.org}
\ead[url]{http://madsenlab.org}

\author{Carl P. Lipo}
\address{Department of Anthropology and IIRMES, 1250 Bellflower Blvd, California State University at Long Beach, Long Beach CA, 90840 USA}
\ead{Carl.Lipo@csulb.edu}
\ead[url]{http://lipolab.org}


\begin{abstract}
\lipsum[1]
\end{abstract}

\begin{keyword}
seriation \sep combinatorics \sep algorithms \sep cultural transmission
%\MSC[2010]{91D99}
\end{keyword}

\end{frontmatter}

% line numbers to facilitating editing drafts
\linenumbers


%%% Setup the R context %%%
<<setup, include=FALSE>>=
library(ggplot2)
library(randtoolbox)
library(xtable)

@




%% main text
\section{Introduction}

\lipsum[1-2]


\section{Single Seriation Combinatorics}
\label{sec:single-seriation}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<sscalc,include=FALSE,tidy=TRUE>>=
parallelism <- 64  # number of cores for parallel testing of possible solutions
secs_per_trial <- 0.005  # 5 millseconds per trial

single_seriation_stats <- function(n) {
  total_trials <- (factorial(n) / 2)
  trial_batches <- total_trials / parallelism
  
  days_in_avg_month <- 30.4368
  time_batches_sec <- trial_batches * secs_per_trial
  time_batches_days <- time_batches_sec / 86400
  time_batches_months <- time_batches_days / days_in_avg_month
  time_batches_years <- time_batches_days / 365.25
  times <- c(n, total_trials, time_batches_sec,time_batches_years)
}

sscomb <- data.frame(matrix(ncol=3,nrow=0))

nseq <- c(seq(from=4, to=10, by=2), 12, 13, 14, 15, 16, seq(from=20, to=100, by=20))

for(n in nseq) {
  sscomb <- rbind(sscomb, single_seriation_stats(n))
}

colnames(sscomb) <- c("N", "Seriation Solutions", "Seconds","Years")
capt <- paste("Number of unique seriation solutions and parallel processing time for sets of assemblages $4 < n < 100$, testing solutions across",parallelism,"cores, assuming 5ms per trial",sep=" ")

@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Seriation, whether employing class frequencies or simple occurrence to order assemblages, yields solutions which are permutations of the set of assemblages.  Because we cannot determine the ``polarity'' of a seriation solution---which ends represent early and late---from the class data alone, a unique seriation solution is thus formally a pair of mirror-image permutations:

\begin{equation}
\{a,d,b,c,e\} \equiv \{e,c,b,d,a\}
\end{equation}

This means that a set of $n$ assemblages can yield $n! / 2$ distinct solutions, regardless of whether solutions are composed of ordered similarity matrices or``Fordian'' frequency curves.  With small numbers of assemblages, enumeration and testing of all possible solutions is easy, even without parallel testing across many processors.  The ability to test solutions by enumeration quickly breaks down with only a modest number of assemblages.  Table \ref{tab:ss-stats} gives the number of unique solutions for selected problem sizes between 4 and 100 assemblages, and estimates of processing time to enumerate and test all solutions, assuming a cluster of 64 cores, and 5ms per solution test.\footnote{These assumptions concerning per-trial processing time and parallelism are arbitrary but within reach of social scientists given Amazon's EC2 cloud computing infrastructure, without requiring formal ``supercomputer'' access.  Modification by a factor of 10 has little effect on the results, perhaps shifting feasibility upward slightly before combinatorial explosion occurs.}  With 10 assemblages, we can test all solutions quickly enough that even a serial algorithm on a single core will be adequate to find the global best solution in a matter of hours, with parallelism improving this to real time responses.  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<sstable,echo=FALSE,results=asis>>=

xt2 <- xtable(sscomb, align="|c|c|r|r|r|", display=c("d","d","g","g","g"),caption=capt,label="tab:ss-stats")
print(xt2, include.rownames=FALSE)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

13 assemblages will turn out to be the practical limit for direct enumeration, even given parallel processing with circa-2012 technology, with total processing time of nearly 3 days running 64 cores at full capacity.\footnote{Realistically, almost nobody would contemplate doing this, given the expense of the computing time relative to the value of guaranteeing the optimal solution, but the hypothetical example demonstrates that such solutions are \emph{feasible}.}  Problems involving 14 and 15 assemblages reach the point where large clusters require more than a month and 19 months respectively, to solve.  Beyond 15 assemblages, a ``combinatorial explosion'' sets in, with 20 assemblages requiring more than 3 million years, before solution times quickly exceed the lifetime of the universe.  

In short, top-down enumerative methods are feasible for small sets of assemblages, and given widespread availability of multiple core computers, seriation packages should employ enumeration for small problems, or to build and test smaller parts of larger seriation solutions, as we describe in Section \ref{sec:algo-mult-large}.  

\section{Deterministic Seriation with Multiple Solution Groups}
\label{sec:seriation-groups}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<subsets-calc,include=FALSE,tidy=TRUE>>=

ex_num_sol_init <- c(3,4,6,8)
assem <- c(20, 40, 60)
max_assem <- max(assem)
subset_incr <- 5

max_subset_labels <- c(ex_num_sol_init, seq(from=10, to=max_assem/2, by=subset_incr))
max_rows <- length(max_subset_labels)

cnames <-c("Subset Size (m)")
subsets <- data.frame(matrix(ncol=0,nrow=max_rows))
# The subset sizes are the first column
subsets <- cbind(subsets, max_subset_labels)

# Create columns for each assemblage size, picking out the {n,k} for the desired subset sizes
for(n in assem) {
  # add the assemblage size as a colname
  cnames <- c(cnames, as.character(n))
  
  # calculate additional subset sizes based on the size of the assemblage, up to 1/2*N since {n,k} peaks there
  more_subsets <- seq(from=10, to=n/2, by=subset_incr)
  subsets_selected <- c(ex_num_sol_init, more_subsets)
  
  # calculate the stirling numbers of the second kind
  # the output of stirling() is a zero-based array for substantive reasons, 
  # so to pull out the appropriate values in a 1-based array index language, add one to 
  # all indices...
  stirl <- stirling(n)
  col <- stirl[subsets_selected + 1]
  
  # since this is a data frame, pad the rest of the column with NA
  num_NA_needed <- max_rows - length(col)
  col <- c(col, rep(NA_integer_, num_NA_needed))
  
  subsets <- cbind(subsets, col)
}

colnames(subsets) <- cnames

@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

In an earlier paper \citep{Lipo1997}, we introduced an iterative method for finding deterministic solutions to the frequency seriation problem by partitioning assemblages into subsets, each of which meets the unimodal ordering principle, within tolerance limits governed by sample size.  \citet{Lipo2001b} extended and refined the method in his dissertation research.  Our initial work on the method employed a combination of automated calculations (e.g., bootstrap significance tests for pairwise orderings), and manual sorting of assemblages into groups and specific positions (using an Excel macro package available at \url{http://lipolab.org/seriation.html}).  Figure \ref{fig:mult-seriation-groups} is an example of seriation with multiple solution groups, from Lipo's dissertation research in the \LMV.  

\begin{figure*}
%\centering
	\includegraphics[scale=0.75]{lipo-figure-4-4.pdf}
	\caption{Example of a deterministic frequency seriation with assemblages partitioned into multiple subsets or solution groups.  From \citet{Lipo2001b}, Figure 4.4.}
	\label{fig:mult-seriation-groups}
\end{figure*}

Our initial work suggests assemblages seriate together into groups reflecting variation in the intensity of \ct among assemblages, over their duration of accumulation. In most cases, solution groups tend to be spatiotemporally compact, and form clusters when mapped on the landscape, although long-distance connections between past communities can also yield patterns which are more complex and less cohensive when mapped.  Madsen's dissertation research is aimed at tying the properties seriation solution groups to their causes in regional patterns of interaction and the dynamics of specific \ct models.  

From a combinatorial standpoint, seriation with multiple solution groups can be structured as follows.  We begin with $n$ assemblages in total, and seek a solution or solutions whereby we end up with $m$ solution groups, where $m < n$.  Each solution must have at least one assemblage, and in practice will often have 3 or more (singletons may indicate assemblages which simply do not ``fit'' with anything else in the data set).  The number of ways that $n$ objects can be partitioned into $m$ non-empty subsets is given by the Stirling numbers of the second kind, which are given by the recursion equation:

\begin{equation}
\stirlingsubset{k}{n} = 
\end{equation}







%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
<<subsets-table,echo=FALSE,results=asis>>=

capt2 <- paste("Number of ways to form m subsets (seriation solutions) from 20, 40, and 60 assemblages")
xt3 <- xtable(subsets, align="|c|c|r|r|r|", display=c("d","d","g","g","g"),caption=capt2, label="tab:subsets")
print(xt3, include.rownames=FALSE)
@
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


\section{Multiple Seriation Group Algorithm for Large Problem Sizes}
\label{sec:algo-mult-large}




\section{Discussion and Conclusions}
\label{sec:conclusions}

\lipsum[4-7]

\section{Acknowledgements}
foo bar.


%% The Appendices part is started with the command \appendix;
%% appendix sections are then done as normal sections
%% \appendix

%% \section{}
%% \label{}



%% References with bibTeX database:

\bibliographystyle{model2-names}
\bibliography{biblio/ct-proposal}








\begin{table}
\begin{tabular}{|c|c|c|}
\hline
TA Duration & Min Sample Size & Max Sample Size \\ 
  \hline
  1 & 130494 & 247491 \\ 
    3 & 4497 & 43494 \\ 
    7 & 1926 & 18639 \\ 
   15 & 897 & 8694 \\ 
   31 & 435 & 4209 \\ 
   62 & 216 & 2103 \\ 
  125 & 105 & 1038 \\ 
  250 & 516 & 981 \\ 
  500 & 255 & 486 \\ 
  1000 & 114 & 228 \\ 
  2000 &  57 & 114 \\ 
  4000 &  27 &  54 \\ 
  8000 &  12 &  16 \\ 
  \hline
\end{tabular}
\caption{Breakdown of sample sizes for analysis of trait richness ($K_n$), by size of time-averaging ``window.''  Some values of $\theta$ required larger numbers of simulation runs to achieve stable result, thus the difference between samples sizes at the same TA duration.}
\label{tab:sample-size-kn}
\end{table}



\end{document}

%%
%% End of file `elsarticle-template-2-harv.tex'.
